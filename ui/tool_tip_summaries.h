/*
 Copyright 2025 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/

#include <unordered_map>
#include <string>

// Generated summaries for Vulkan API commands, used for tooltips in the UI.
const std::unordered_map<std::string, const char*> kVulkanCommandTooltipSummaries = {
    { "vkQueueSubmit",
      "Submits recorded command buffers to a hardware queue for asynchronous GPU execution." },
    { "vkQueueSubmit2",
      "Vulkan 1.3 submission call: Submits command buffers with extended synchronization info." },
    { "vkQueueSubmit2KHR",
      "KHR extension for V1.3 submission: Submits command buffers with extended synchronization "
      "info." },
    { "vkBeginCommandBuffer", "Starts the process of recording commands into a command buffer." },
    { "vkEndCommandBuffer",
      "Finalizes the recording of all commands in the buffer, making it ready for execution." },
    { "vkCmdBeginRenderPass",
      "Initiates a render pass instance, starting rendering to a framebuffer." },
    { "vkCmdEndRenderPass",
      "Ends the active render pass instance, completing the output to the framebuffer." },
    { "vkCmdBeginRenderPass2KHR",
      "KHR extension: V1.2 render pass start call with extended subpass info." },
    { "vkCmdEndRenderPass2KHR",
      "KHR extension: V1.2 call to end the render pass (with extended info)." },
    { "vkCmdDraw",
      "Records a non-indexed draw command using the current pipeline and vertex count." },
    { "vkCmdDrawIndexed", "Records a draw command using the bound index buffer." },
    { "vkCmdDrawIndirect",
      "Draws objects where the parameters are sourced from a buffer on the GPU." },
    { "vkCmdDrawIndexedIndirect",
      "Indexed draw where parameters are fetched from a buffer on the GPU." },
    { "vkCmdDispatch",
      "Launches a compute shader execution grid based on a fixed workgroup count." },
    { "vkCmdDispatchIndirect",
      "Launches a compute shader where the workgroup count is read from a buffer." },
    { "vkCmdDrawIndirectCount",
      "Draws indirectly using a count read from a buffer (Vulkan 1.2 core)." },
    { "vkCmdDrawIndexedIndirectCount",
      "Indexed draw indirectly using a count read from a buffer (Vulkan 1.2 core)." },
    { "vkCmdDrawIndirectCountKHR",
      "KHR extension: Draws indirectly using a count read from a buffer." },
    { "vkCmdDrawIndexedIndirectCountKHR",
      "KHR extension: Indexed draw indirectly using a count read from a buffer." },
    { "vkCmdDrawIndirectCountAMD",
      "AMD extension: Draws indirectly using a count read from a buffer." },
    { "vkCmdDrawIndexedIndirectCountAMD",
      "AMD extension: Indexed draw indirectly using a count read from a buffer." },
    { "vkCmdDrawIndirectByteCountEXT",
      "Draws indirectly using a vertex count read from a counter buffer." },
    { "vkCmdDrawMultiEXT",
      "Records multiple non-indexed draw commands from a single command call." },
    { "vkCmdDrawMultiIndexedEXT",
      "Records multiple indexed draw commands from a single command call." },
    { "vkCmdDrawMeshTasksNV",
      "Launches a mesh shading pipeline using a fixed task count (NV extension)." },
    { "vkCmdDrawMeshTasksIndirectNV",
      "Launches mesh tasks where parameters are read from a buffer." },
    { "vkCmdDrawMeshTasksIndirectCountNV",
      "Launches mesh tasks indirectly using a count read from a buffer." },
    { "vkCmdDrawMeshTasksEXT",
      "Launches a mesh shading pipeline using a fixed task count (EXT extension)." },
    { "vkCmdDrawMeshTasksIndirectEXT",
      "Launches mesh tasks where parameters are read from a buffer." },
    { "vkCmdDrawMeshTasksIndirectCountEXT",
      "Launches mesh tasks indirectly using a count read from a buffer." },
    { "vkCmdDrawClusterHUAWEI", "Launches a mesh-like draw command using a fixed group count." },
    { "vkCmdDrawClusterIndirectHUAWEI",
      "Launches a mesh-like draw command where parameters are read from a buffer." },
    { "vkCmdBindPipeline", "Binds a graphics or compute pipeline object to the command buffer." },
    { "vkCmdBindDescriptorSets",
      "Binds descriptor sets (containing resource links) to the current pipeline layout." },
    { "vkCmdBindIndexBuffer",
      "Binds the buffer containing vertex indices for use by indexed draw calls." },
    { "vkCmdBindVertexBuffers", "Attaches one or more vertex buffers to the command buffer." },
    { "vkCmdSetViewport",
      "Dynamically sets the viewport state that transforms vertices to the window." },
    { "vkCmdSetScissor",
      "Dynamically sets the scissor rectangle for fragment clipping during rendering." },
    { "vkCmdSetLineWidth", "Dynamically sets the rasterizer line width for drawing lines." },
    { "vkCmdSetDepthBias", "Dynamically sets depth bias parameters used for polygon offset." },
    { "vkCmdSetBlendConstants", "Dynamically sets the RGBA blend constants for blend operations." },
    { "vkCmdSetDepthBounds",
      "Dynamically sets the min/max depth values for the depth bounds test." },
    { "vkCmdSetStencilCompareMask",
      "Dynamically sets the stencil compare mask for the stencil test." },
    { "vkCmdSetStencilWriteMask",
      "Dynamically sets the stencil write mask for stencil operations." },
    { "vkCmdSetStencilReference",
      "Dynamically sets the stencil reference value for the stencil test." },
    { "vkCmdPushDescriptorSet",
      "Records a dynamic descriptor set update without requiring a descriptor pool." },
    { "vkCmdSetRenderingAttachmentLocations",
      "Dynamically sets color/depth/stencil output locations for subsequent draw calls." },
    { "vkCmdSetRenderingInputAttachmentIndices",
      "Dynamically sets input attachment indices for subsequent subpasses." },
    { "vkCmdBindDescriptorSets2",
      "Vulkan 1.3 structure-based descriptor set bind with extended info." },
    { "vkCmdPushConstants2",
      "Vulkan 1.3 structure-based push constants command with extended info." },
    { "vkCmdPushDescriptorSet2",
      "Vulkan 1.3 structure-based dynamic descriptor set update command." },
    { "vkCmdSetCullMode", "Dynamically sets the cull mode (Vulkan 1.3 core)." },
    { "vkCmdSetFrontFace",
      "Dynamically sets the polygon front face orientation (Vulkan 1.3 core)." },
    { "vkCmdSetPrimitiveTopology",
      "Dynamically sets the primitive topology for draw commands (Vulkan 1.3 core)." },
    { "vkCmdSetViewportWithCount",
      "Dynamically sets the count and data for viewports (Vulkan 1.3 core)." },
    { "vkCmdSetScissorWithCount",
      "Dynamically sets the count and data for scissors (Vulkan 1.3 core)." },
    { "vkCmdBindVertexBuffers2",
      "Binds vertex buffers with optional sizes and strides (Vulkan 1.3 core)." },
    { "vkCmdSetDepthTestEnable", "Dynamically enables/disables the depth test (Vulkan 1.3 core)." },
    { "vkCmdSetDepthWriteEnable", "Dynamically enables/disables depth write (Vulkan 1.3 core)." },
    { "vkCmdSetDepthCompareOp",
      "Dynamically sets the depth comparison operator (Vulkan 1.3 core)." },
    { "vkCmdSetDepthBoundsTestEnable",
      "Dynamically enables/disables the depth bounds test (Vulkan 1.3 core)." },
    { "vkCmdSetStencilTestEnable",
      "Dynamically enables/disables the stencil test (Vulkan 1.3 core)." },
    { "vkCmdSetStencilOp", "Dynamically sets the stencil operation per face (Vulkan 1.3 core)." },
    { "vkCmdSetRasterizerDiscardEnable",
      "Dynamically enables/disables rasterizer discard (Vulkan 1.3 core)." },
    { "vkCmdSetDepthBiasEnable", "Dynamically enables/disables depth bias (Vulkan 1.3 core)." },
    { "vkCmdSetPrimitiveRestartEnable",
      "Dynamically enables/disables primitive restart (Vulkan 1.3 core)." },
    { "vkCmdSetDeviceMask",
      "Dynamically sets the active physical devices for commands recorded afterwards." },
    { "vkCmdBindIndexBuffer2", "Binds the buffer containing vertex indices with a size." },
    { "vkCmdSetRenderingAttachmentLocationsKHR",
      "KHR extension: Dynamically sets color/depth/stencil output locations." },
    { "vkCmdSetRenderingInputAttachmentIndicesKHR",
      "KHR extension: Dynamically sets input attachment indices." },
    { "vkCmdPushDescriptorSetKHR",
      "KHR extension: Records a dynamic descriptor set update command." },
    { "vkCmdSetDeviceMaskKHR", "KHR extension: Dynamically sets the active physical devices." },
    { "vkCmdSetFragmentShadingRateKHR",
      "Dynamically sets the fragment shading rate using a fragment size." },
    { "vkCmdSetLineStippleKHR", "Dynamically sets the line stipple factor and pattern." },
    { "vkCmdSetCullModeEXT", "Dynamically sets the cull mode (EXT extension)." },
    { "vkCmdSetFrontFaceEXT",
      "Dynamically sets the polygon front face orientation (EXT extension)." },
    { "vkCmdSetPrimitiveTopologyEXT",
      "Dynamically sets the primitive topology for draw commands (EXT extension)." },
    { "vkCmdSetViewportWithCountEXT",
      "Dynamically sets the count and data for viewports (EXT extension)." },
    { "vkCmdSetScissorWithCountEXT",
      "Dynamically sets the count and data for scissors (EXT extension)." },
    { "vkCmdBindVertexBuffers2EXT",
      "Binds vertex buffers with optional sizes and strides (EXT extension)." },
    { "vkCmdSetDepthTestEnableEXT",
      "Dynamically enables/disables the depth test (EXT extension)." },
    { "vkCmdSetDepthWriteEnableEXT", "Dynamically enables/disables depth write (EXT extension)." },
    { "vkCmdSetDepthCompareOpEXT",
      "Dynamically sets the depth comparison operator (EXT extension)." },
    { "vkCmdSetDepthBoundsTestEnableEXT",
      "Dynamically enables/disables the depth bounds test (EXT extension)." },
    { "vkCmdSetStencilTestEnableEXT",
      "Dynamically enables/disables the stencil test (EXT extension)." },
    { "vkCmdSetStencilOpEXT", "Dynamically sets the stencil operation per face (EXT extension)." },
    { "vkCmdSetRasterizerDiscardEnableEXT",
      "Dynamically enables/disables rasterizer discard (EXT extension)." },
    { "vkCmdSetDepthBiasEnableEXT", "Dynamically enables/disables depth bias (EXT extension)." },
    { "vkCmdSetPrimitiveRestartEnableEXT",
      "Dynamically enables/disables primitive restart (EXT extension)." },
    { "vkCmdBindPipelineShaderGroupNV",
      "Binds a shader group from a pipeline (for device-generated commands)." },
    { "vkCmdSetViewportWScalingNV", "Dynamically sets the viewport W-scaling parameters." },
    { "vkCmdSetViewportWScalingEnableNV", "Dynamically enables/disables viewport W-scaling." },
    { "vkCmdSetViewportSwizzleNV", "Dynamically sets the viewport swizzle mode." },
    { "vkCmdSetCoverageToColorEnableNV",
      "Dynamically enables/disables coverage-to-color conversion." },
    { "vkCmdSetCoverageToColorLocationNV",
      "Dynamically sets the coverage-to-color attachment location." },
    { "vkCmdSetCoverageModulationModeNV", "Dynamically sets the coverage modulation mode." },
    { "vkCmdSetCoverageModulationTableEnableNV",
      "Dynamically enables/disables the coverage modulation table." },
    { "vkCmdSetCoverageModulationTableNV", "Dynamically sets the coverage modulation table data." },
    { "vkCmdSetShadingRateImageEnableNV", "Dynamically enables/disables the shading rate image." },
    { "vkCmdSetRepresentativeFragmentTestEnableNV",
      "Dynamically enables/disables the representative fragment test." },
    { "vkCmdSetCoverageReductionModeNV", "Dynamically sets the coverage reduction mode." },
    { "vkCmdSetExclusiveScissorEnableNV",
      "Dynamically enables/disables exclusive scissor testing per viewport." },
    { "vkCmdSetExclusiveScissorNV", "Dynamically sets the exclusive scissor rectangles." },
    { "vkCmdSetFragmentShadingRateEnumNV",
      "Dynamically sets the fragment shading rate using an enum value." },
    { "vkCmdSetLineStippleEXT", "Dynamically sets the line stipple factor and pattern." },
    { "vkCmdSetCullModeEXT", "Dynamically sets the cull mode (EXT extension)." },
    { "vkCmdSetFrontFaceEXT",
      "Dynamically sets the polygon front face orientation (EXT extension)." },
    { "vkCmdSetPrimitiveTopologyEXT",
      "Dynamically sets the primitive topology for draw commands (EXT extension)." },
    { "vkCmdSetViewportWithCountEXT",
      "Dynamically sets the count and data for viewports (EXT extension)." },
    { "vkCmdSetScissorWithCountEXT",
      "Dynamically sets the count and data for scissors (EXT extension)." },
    { "vkCmdBindVertexBuffers2EXT",
      "Binds vertex buffers with optional sizes and strides (EXT extension)." },
    { "vkCmdSetDepthTestEnableEXT",
      "Dynamically enables/disables the depth test (EXT extension)." },
    { "vkCmdSetDepthWriteEnableEXT", "Dynamically enables/disables depth write (EXT extension)." },
    { "vkCmdSetDepthCompareOpEXT",
      "Dynamically sets the depth comparison operator (EXT extension)." },
    { "vkCmdSetDepthBoundsTestEnableEXT",
      "Dynamically enables/disables the depth bounds test (EXT extension)." },
    { "vkCmdSetStencilTestEnableEXT",
      "Dynamically enables/disables the stencil test (EXT extension)." },
    { "vkCmdSetStencilOpEXT", "Dynamically sets the stencil operation per face (EXT extension)." },
    { "vkCmdBindIndexBuffer2KHR",
      "KHR extension: Binds the buffer containing vertex indices with a size." },
    { "vkCmdSetRenderingAttachmentLocations",
      "Dynamically sets color/depth/stencil output locations for subsequent draw calls." },
    { "vkCmdSetRenderingInputAttachmentIndices",
      "Dynamically sets input attachment indices for subsequent subpasses." },
    { "vkCmdBindDescriptorSets2KHR",
      "KHR extension: Structure-based descriptor set bind with extended info." },
    { "vkCmdPushConstants2KHR",
      "KHR extension: Structure-based push constants command with extended info." },
    { "vkCmdPushDescriptorSet2KHR",
      "KHR extension: Structure-based dynamic descriptor set update command." },
    { "vkCmdSetDescriptorBufferOffsets2EXT",
      "Dynamically sets descriptor buffer offsets for descriptor buffer usage." },
    { "vkCmdBindDescriptorBufferEmbeddedSamplers2EXT",
      "Binds embedded samplers for use with descriptor buffers." },
    { "vkCmdSetPatchControlPointsEXT",
      "Dynamically sets the number of control points per patch for tessellation." },
    { "vkCmdSetRasterizerDiscardEnableEXT",
      "Dynamically enables/disables rasterizer discard (EXT extension)." },
    { "vkCmdSetDepthBiasEnableEXT", "Dynamically enables/disables depth bias (EXT extension)." },
    { "vkCmdSetLogicOpEXT", "Dynamically sets the logical operation used for blending." },
    { "vkCmdSetPrimitiveRestartEnableEXT",
      "Dynamically enables/disables primitive restart (EXT extension)." },
    { "vkCmdSetColorWriteEnableEXT", "Dynamically enables/disables color write per attachment." },
    { "vkCmdSetDepthBias2EXT", "Dynamically sets depth bias parameters using a structure." },
    { "vkCmdUpdatePipelineIndirectBufferNV",
      "Updates the internal state of an indirect compute pipeline." },
    { "vkCmdSetDepthClampEnableEXT", "Dynamically enables/disables depth clamping." },
    { "vkCmdSetPolygonModeEXT",
      "Dynamically sets the polygon rasterization mode (e.g., fill or line)." },
    { "vkCmdSetRasterizationSamplesEXT", "Dynamically sets the number of rasterization samples." },
    { "vkCmdSetSampleMaskEXT", "Dynamically sets the coverage sample mask." },
    { "vkCmdSetAlphaToCoverageEnableEXT",
      "Dynamically enables/disables alpha-to-coverage blending." },
    { "vkCmdSetAlphaToOneEnableEXT", "Dynamically enables/disables alpha-to-one blending." },
    { "vkCmdSetLogicOpEnableEXT",
      "Dynamically enables/disables the logical operation (for blending)." },
    { "vkCmdSetColorBlendEnableEXT",
      "Dynamically enables/disables color blending per attachment." },
    { "vkCmdSetColorBlendEquationEXT",
      "Dynamically sets the color blend equation per attachment." },
    { "vkCmdSetColorWriteMaskEXT", "Dynamically sets the color write mask per attachment." },
    { "vkCmdSetTessellationDomainOriginEXT", "Dynamically sets the tessellation domain origin." },
    { "vkCmdSetRasterizationStreamEXT", "Dynamically selects the primitive output stream." },
    { "vkCmdSetConservativeRasterizationModeEXT",
      "Dynamically sets the conservative rasterization mode." },
    { "vkCmdSetExtraPrimitiveOverestimationSizeEXT",
      "Dynamically sets the extra overestimation size for conservative rasterization." },
    { "vkCmdSetDepthClipEnableEXT",
      "Dynamically enables/disables depth clipping (beyond far plane)." },
    { "vkCmdSetSampleLocationsEnableEXT", "Dynamically enables/disables custom sample locations." },
    { "vkCmdSetColorBlendAdvancedEXT",
      "Dynamically sets advanced blend operations per attachment." },
    { "vkCmdSetProvokingVertexModeEXT",
      "Dynamically sets the provoking vertex mode for flat shading." },
    { "vkCmdSetLineRasterizationModeEXT", "Dynamically sets the line rasterization mode." },
    { "vkCmdSetLineStippleEnableEXT", "Dynamically enables/disables line stippling." },
    { "vkCmdSetDepthClipNegativeOneToOneEXT",
      "Dynamically sets the clip space depth range (0 to 1 or -1 to 1)." },
    { "vkCmdCopyBuffer",
      "Copies data regions from one buffer resource to another buffer resource." },
    { "vkCmdCopyImage",
      "Copies pixel data between two image resources (without format conversion)." },
    { "vkCmdBlitImage",
      "Copies an image with scaling, filtering, or format conversion (a 'blit')." },
    { "vkCmdCopyBufferToImage", "Transfers data from a linear buffer to an image resource." },
    { "vkCmdCopyImageToBuffer", "Transfers pixel data from an image resource to a linear buffer." },
    { "vkCmdUpdateBuffer",
      "Performs a host-to-device transfer to quickly update a small region of a buffer." },
    { "vkCmdFillBuffer", "Fills a contiguous region of a buffer with a 32-bit constant value." },
    { "vkCmdClearColorImage",
      "Clears an image outside of a render pass, setting all pixels to a single color." },
    { "vkCmdClearDepthStencilImage", "Clears the depth/stencil image outside of a render pass." },
    { "vkCmdClearAttachments",
      "Clears regions of the current framebuffer attachments within a render pass." },
    { "vkCmdResolveImage", "Resolves a multisample image into a single-sample destination image." },
    { "vkCmdSetEvent", "Sets a Vulkan event within a command buffer for synchronization." },
    { "vkCmdResetEvent", "Resets a Vulkan event within a command buffer." },
    { "vkCmdWaitEvents",
      "Records a synchronization dependency, waiting for one or more events to be signaled." },
    { "vkCmdPipelineBarrier",
      "Inserts a synchronization dependency between pipeline stages and memory access." },
    { "vkCmdBeginQuery", "Starts an operation on a query pool to track GPU metrics." },
    { "vkCmdEndQuery", "Ends the active query initiated by a previous vkCmdBeginQuery command." },
    { "vkCmdResetQueryPool",
      "Resets a range of queries in the query pool within the command buffer." },
    { "vkCmdWriteTimestamp",
      "Writes a timestamp at a specified pipeline stage into a query pool." },
    { "vkCmdCopyQueryPoolResults",
      "Copies the results from a query pool into a destination buffer." },
    { "vkCmdSetEvent2", "Vulkan 1.3 call to set an event using a VkDependencyInfo." },
    { "vkCmdResetEvent2", "Vulkan 1.3 call to reset an event using a VkPipelineStageFlags2 mask." },
    { "vkCmdWaitEvents2",
      "Vulkan 1.3 call for synchronization, waiting on events with dependency info." },
    { "vkCmdPipelineBarrier2",
      "Vulkan 1.3 synchronization call using a consolidated VkDependencyInfo." },
    { "vkCmdWriteTimestamp2",
      "Vulkan 1.3 call to write a timestamp at a specified pipeline stage." },
    { "vkCmdCopyBuffer2", "Vulkan 1.3 structure-based buffer copy with extended info." },
    { "vkCmdCopyImage2", "Vulkan 1.3 structure-based image copy with extended info." },
    { "vkCmdCopyBufferToImage2",
      "Vulkan 1.3 structure-based buffer-to-image copy with extended info." },
    { "vkCmdCopyImageToBuffer2",
      "Vulkan 1.3 structure-based image-to-buffer copy with extended info." },
    { "vkCmdBlitImage2", "Vulkan 1.3 structure-based image blit with extended info." },
    { "vkCmdResolveImage2", "Vulkan 1.3 structure-based image resolve with extended info." },
    { "vkCmdSetEvent2KHR",
      "KHR extension: Vulkan 1.3 call to set an event using a VkDependencyInfo." },
    { "vkCmdResetEvent2KHR",
      "KHR extension: Vulkan 1.3 call to reset an event using a VkPipelineStageFlags2 mask." },
    { "vkCmdWaitEvents2KHR",
      "KHR extension: Vulkan 1.3 call for synchronization, waiting on events with dependency "
      "info." },
    { "vkCmdPipelineBarrier2KHR",
      "KHR extension: Vulkan 1.3 synchronization call using a consolidated VkDependencyInfo." },
    { "vkCmdWriteTimestamp2KHR",
      "KHR extension: Vulkan 1.3 call to write a timestamp at a specified pipeline stage." },
    { "vkCmdCopyBuffer2KHR",
      "KHR extension: Vulkan 1.3 structure-based buffer copy with extended info." },
    { "vkCmdCopyImage2KHR",
      "KHR extension: Vulkan 1.3 structure-based image copy with extended info." },
    { "vkCmdCopyBufferToImage2KHR",
      "KHR extension: Vulkan 1.3 structure-based buffer-to-image copy with extended info." },
    { "vkCmdCopyImageToBuffer2KHR",
      "KHR extension: Vulkan 1.3 structure-based image-to-buffer copy with extended info." },
    { "vkCmdBlitImage2KHR",
      "KHR extension: Vulkan 1.3 structure-based image blit with extended info." },
    { "vkCmdResolveImage2KHR",
      "KHR extension: Vulkan 1.3 structure-based image resolve with extended info." },
    { "vkCmdTraceRaysIndirect2KHR",
      "KHR extension: Launches ray tracing indirectly using a device address." },
    { "vkCmdBeginQueryIndexedEXT",
      "Starts a query with an index, typically for transform feedback or occlusion." },
    { "vkCmdEndQueryIndexedEXT", "Ends an indexed query." },
    { "vkCmdSetCheckpointNV",
      "Inserts a checkpoint marker into the command buffer for debugging." },
    { "vkCmdBindTransformFeedbackBuffersEXT", "Binds buffers for transform feedback output." },
    { "vkCmdBeginTransformFeedbackEXT", "Begins a transform feedback operation." },
    { "vkCmdEndTransformFeedbackEXT", "Ends the active transform feedback operation." },
    { "vkCmdSetSampleLocationsEXT", "Dynamically sets the sample locations for multisampling." },
    { "vkCmdBindShadingRateImageNV", "Binds the shading rate image for variable rate shading." },
    { "vkCmdSetCoarseSampleOrderNV",
      "Dynamically controls the mapping of fragments to subpixels/samples." },
    { "vkCmdCopyAccelerationStructureNV",
      "Copies an acceleration structure (e.g., for defragmentation)." },
    { "vkCmdTraceRaysNV",
      "Launches ray generation on the GPU using binding tables (NV extension)." },
    { "vkCmdWriteAccelerationStructuresPropertiesNV",
      "Writes the properties of acceleration structures into a query pool." },
    { "vkCmdWriteBufferMarkerAMD",
      "Writes a 32-bit marker value into a buffer at a specific pipeline stage." },
    { "vkCmdWriteBufferMarker2AMD",
      "Vulkan 1.3 extension: Writes a 32-bit marker value into a buffer." },
    { "vkCmdBindInvocationMaskHUAWEI", "Binds an image view as an invocation mask for culling." },
    { "vkCmdBuildMicromapsEXT",
      "Records a command to build or update a sub-structure for micro-meshes." },
    { "vkCmdCopyMicromapEXT", "Copies a micromap to another micromap structure." },
    { "vkCmdCopyMicromapToMemoryEXT", "Copies a micromap into host or device accessible memory." },
    { "vkCmdCopyMemoryToMicromapEXT", "Copies memory data into a micromap structure." },
    { "vkCmdWriteMicromapsPropertiesEXT", "Writes the properties of micromaps into a query pool." },
    { "vkCmdDrawClusterHUAWEI", "Launches a mesh-like draw command using a fixed group count." },
    { "vkCmdDrawClusterIndirectHUAWEI",
      "Launches a mesh-like draw command where parameters are read from a buffer." },
    { "vkCmdConvertCooperativeVectorMatrixNV",
      "Records a command to convert a cooperative matrix on the GPU." },
    { "vkCmdBindTileMemoryQCOM", "Binds memory to tile access for tile-based rendering." },
    { "vkCmdBuildPartitionedAccelerationStructuresNV",
      "Records a command to build partitioned acceleration structures." },
    { "vkCmdPreprocessGeneratedCommandsNV", "Records a command to preprocess generated commands." },
    { "vkCmdExecuteGeneratedCommandsNV",
      "Records a command to execute a list of generated commands." },
    { "vkCmdPreprocessGeneratedCommandsEXT",
      "Records a command to preprocess generated commands." },
    { "vkCmdExecuteGeneratedCommandsEXT",
      "Records a command to execute a list of generated commands." },
    { "vkCmdTraceRaysKHR",
      "Launches ray generation on the GPU using binding tables (KHR extension)." },
    { "vkCmdTraceRaysIndirectKHR",
      "KHR extension: Launches ray tracing indirectly using a device address." },
    { "vkCmdSetRayTracingPipelineStackSizeKHR",
      "Dynamically sets the ray tracing pipeline stack size." },
    { "vkCmdBuildAccelerationStructuresKHR",
      "Records a command to build or update a ray tracing acceleration structure." },
    { "vkCmdCopyAccelerationStructureKHR",
      "Copies an acceleration structure (e.g., for defragmentation)." },
    { "vkCmdCopyAccelerationStructureToMemoryKHR",
      "Copies an acceleration structure into host or device accessible memory." },
    { "vkCmdCopyMemoryToAccelerationStructureKHR",
      "Copies memory data into an acceleration structure." },
    { "vkCmdWriteAccelerationStructuresPropertiesKHR",
      "Writes the properties of acceleration structures into a query pool." },
    { "vkCmdBeginVideoCodingKHR", "Starts a video coding operation (decode or encode)." },
    { "vkCmdEndVideoCodingKHR", "Ends the active video coding operation." },
    { "vkCmdControlVideoCodingKHR", "Records a control command for a video coding operation." },
    { "vkCmdDecodeVideoKHR", "Records a video decode operation on the command buffer." },
    { "vkCmdEncodeVideoKHR", "Records a video encode operation on the command buffer." },
    { "vkCmdSetLineStipple", "Dynamically sets the line stipple factor and pattern." },
    { "vkCmdSetRenderingAttachmentLocationsKHR",
      "KHR extension: Dynamically sets color/depth/stencil output locations." },
    { "vkCmdSetRenderingInputAttachmentIndicesKHR",
      "KHR extension: Dynamically sets input attachment indices." },
    { "vkCmdSetFragmentShadingRateKHR",
      "Dynamically sets the fragment shading rate using a fragment size." },
    { "vkCmdSetRenderingAttachmentLocations",
      "Dynamically sets color/depth/stencil output locations for subsequent draw calls." },
    { "vkCmdSetRenderingInputAttachmentIndices",
      "Dynamically sets input attachment indices for subsequent subpasses." },
    { "vkCmdSetLineStippleEXT", "Dynamically sets the line stipple factor and pattern." },
    { "vkCmdSetCullMode", "Dynamically sets the cull mode (Vulkan 1.3 core)." },
    { "vkCmdSetFrontFace",
      "Dynamically sets the polygon front face orientation (Vulkan 1.3 core)." },
    { "vkCmdSetPrimitiveTopology",
      "Dynamically sets the primitive topology for draw commands (Vulkan 1.3 core)." },
    { "vkCmdSetViewportWithCount",
      "Dynamically sets the count and data for viewports (Vulkan 1.3 core)." },
    { "vkCmdSetScissorWithCount",
      "Dynamically sets the count and data for scissors (Vulkan 1.3 core)." },
    { "vkCmdBindVertexBuffers2",
      "Binds vertex buffers with optional sizes and strides (Vulkan 1.3 core)." },
    { "vkCmdSetDepthTestEnable", "Dynamically enables/disables the depth test (Vulkan 1.3 core)." },
    { "vkCmdSetDepthWriteEnable", "Dynamically enables/disables depth write (Vulkan 1.3 core)." },
    { "vkCmdSetDepthCompareOp",
      "Dynamically sets the depth comparison operator (Vulkan 1.3 core)." },
    { "vkCmdSetDepthBoundsTestEnable",
      "Dynamically enables/disables the depth bounds test (Vulkan 1.3 core)." },
    { "vkCmdSetStencilTestEnable",
      "Dynamically enables/disables the stencil test (Vulkan 1.3 core)." },
    { "vkCmdSetStencilOp", "Dynamically sets the stencil operation per face (Vulkan 1.3 core)." },
    { "vkCmdSetRasterizerDiscardEnable",
      "Dynamically enables/disables rasterizer discard (Vulkan 1.3 core)." },
    { "vkCmdSetDepthBiasEnable", "Dynamically enables/disables depth bias (Vulkan 1.3 core)." },
    { "vkCmdSetPrimitiveRestartEnable",
      "Dynamically enables/disables primitive restart (Vulkan 1.3 core)." },
    { "vkCmdSetLineStippleKHR", "Dynamically sets the line stipple factor and pattern." },
    { "vkCmdBeginPerTileExecutionQCOM",
      "Begins a tile execution section for commands that operate on tiles." },
    { "vkCmdEndPerTileExecutionQCOM", "Ends a tile execution section." },
    { "vkCmdSetAttachmentFeedbackLoopEnableEXT",
      "Dynamically controls feedback loops for attachments." },
    { "vkCmdBindTileMemoryQCOM", "Binds memory to tile access for tile-based rendering." },
    { "vkCmdEndRendering2EXT", "Ends the active Dynamic Rendering instance (EXT extension)." }
};
