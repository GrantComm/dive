/*
 * Copyright (C) 2020 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * THIS FILE WAS GENERATED BY apic. DO NOT EDIT.
 */

#pragma once
#include <algorithm>
#include <cstring>
#include <iomanip>
#include <sstream>
#include <string>

#include "capture_layer/linear_allocator.h"
#include "third_party/Vulkan-Headers/include/vulkan/vulkan.h"
namespace Dive
{
typedef const VkAllocationCallbacks* AllocationCallbacks;

inline void ToUpper(std::string& s)
{
    for (auto& c : s)
    {
        c = static_cast<char>(toupper(c));
    }
}

inline std::string Uint64ToStr(uint64_t value)
{
    std::stringstream ss;
    ss << std::setw(16) << std::setfill('0') << std::hex << value;
    std::string s = ss.str();
    ToUpper(s);
    s = "0x" + s;
    return s;
}

struct DescriptorSetLayoutBinding
{
    uint32_t           binding;
    VkDescriptorType   descriptorType;
    uint32_t           descriptorCount;
    VkShaderStageFlags stageFlags;
    uint32_t           offset;
};

struct DescriptorBinding
{
    VkDescriptorType m_descriptor_type = VK_DESCRIPTOR_TYPE_MAX_ENUM;
    union
    {
        VkDescriptorImageInfo  m_image_info;
        VkDescriptorBufferInfo m_buffer_info;
        VkBufferView           m_texel_buffer_view;
    } binding_info;
};

struct DescriptorsetInfo
{
    VkDescriptorSetLayout          m_descriptor_set_layout;
    VkDescriptorPool               m_descriptor_pool;
    std::vector<DescriptorBinding> m_bindings;
};

struct CreateBufferArgs
{
    VkDevice                  device;
    VkBufferCreateInfo const* pCreateInfo;
    AllocationCallbacks       pAllocator;
    VkBuffer*                 pBuffer;
};

struct CreateBufferViewArgs
{
    VkDevice                      device;
    VkBufferViewCreateInfo const* pCreateInfo;
    AllocationCallbacks           pAllocator;
    VkBufferView*                 pView;
};

struct BeginCommandBufferArgs
{
    VkCommandBuffer                 commandBuffer;
    VkCommandBufferBeginInfo const* pBeginInfo;
};

struct EndCommandBufferArgs
{
    VkCommandBuffer commandBuffer;
};

struct ResetCommandBufferArgs
{
    VkCommandBuffer           commandBuffer;
    VkCommandBufferResetFlags flags;
};

struct CmdExecuteCommandsArgs
{
    VkCommandBuffer        commandBuffer;
    uint32_t               commandBufferCount;
    VkCommandBuffer const* pCommandBuffers;
};

struct CmdCopyBufferArgs
{
    VkCommandBuffer     commandBuffer;
    VkBuffer            srcBuffer;
    VkBuffer            dstBuffer;
    uint32_t            regionCount;
    VkBufferCopy const* pRegions;
};

struct CmdCopyImageArgs
{
    VkCommandBuffer    commandBuffer;
    VkImage            srcImage;
    uint32_t           srcImageLayout;
    VkImage            dstImage;
    uint32_t           dstImageLayout;
    uint32_t           regionCount;
    VkImageCopy const* pRegions;
};

struct CmdBlitImageArgs
{
    VkCommandBuffer    commandBuffer;
    VkImage            srcImage;
    uint32_t           srcImageLayout;
    VkImage            dstImage;
    uint32_t           dstImageLayout;
    uint32_t           regionCount;
    VkImageBlit const* pRegions;
    uint32_t           filter;
};

struct CmdCopyBufferToImageArgs
{
    VkCommandBuffer          commandBuffer;
    VkBuffer                 srcBuffer;
    VkImage                  dstImage;
    uint32_t                 dstImageLayout;
    uint32_t                 regionCount;
    VkBufferImageCopy const* pRegions;
};

struct CmdCopyImageToBufferArgs
{
    VkCommandBuffer          commandBuffer;
    VkImage                  srcImage;
    uint32_t                 srcImageLayout;
    VkBuffer                 dstBuffer;
    uint32_t                 regionCount;
    VkBufferImageCopy const* pRegions;
};

struct CmdUpdateBufferArgs
{
    VkCommandBuffer commandBuffer;
    VkBuffer        dstBuffer;
    VkDeviceSize    dstOffset;
    VkDeviceSize    dataSize;
    void const*     pData;
};

struct CmdFillBufferArgs
{
    VkCommandBuffer commandBuffer;
    VkBuffer        dstBuffer;
    VkDeviceSize    dstOffset;
    VkDeviceSize    size;
    uint32_t        data;
};

struct CmdClearColorImageArgs
{
    VkCommandBuffer                commandBuffer;
    VkImage                        image;
    uint32_t                       imageLayout;
    VkClearColorValue const*       pColor;
    uint32_t                       rangeCount;
    VkImageSubresourceRange const* pRanges;
};

struct CmdClearDepthStencilImageArgs
{
    VkCommandBuffer                 commandBuffer;
    VkImage                         image;
    uint32_t                        imageLayout;
    VkClearDepthStencilValue const* pDepthStencil;
    uint32_t                        rangeCount;
    VkImageSubresourceRange const*  pRanges;
};

struct CmdClearAttachmentsArgs
{
    VkCommandBuffer          commandBuffer;
    uint32_t                 attachmentCount;
    VkClearAttachment const* pAttachments;
    uint32_t                 rectCount;
    VkClearRect const*       pRects;
};

struct CmdResolveImageArgs
{
    VkCommandBuffer       commandBuffer;
    VkImage               srcImage;
    uint32_t              srcImageLayout;
    VkImage               dstImage;
    uint32_t              dstImageLayout;
    uint32_t              regionCount;
    VkImageResolve const* pRegions;
};

struct CreateDescriptorSetLayoutArgs
{
    VkDevice                               device;
    VkDescriptorSetLayoutCreateInfo const* pCreateInfo;
    AllocationCallbacks                    pAllocator;
    VkDescriptorSetLayout*                 pSetLayout;
};

struct AllocateDescriptorSetsArgs
{
    VkDevice                           device;
    VkDescriptorSetAllocateInfo const* pAllocateInfo;
    VkDescriptorSet*                   pDescriptorSets;
};

struct UpdateDescriptorSetsArgs
{
    VkDevice                    device;
    uint32_t                    descriptorWriteCount;
    VkWriteDescriptorSet const* pDescriptorWrites;
    uint32_t                    descriptorCopyCount;
    VkCopyDescriptorSet const*  pDescriptorCopies;
};

struct CmdBindDescriptorSetsArgs
{
    VkCommandBuffer        commandBuffer;
    uint32_t               pipelineBindPoint;
    VkPipelineLayout       layout;
    uint32_t               firstSet;
    uint32_t               descriptorSetCount;
    VkDescriptorSet const* pDescriptorSets;
    uint32_t               dynamicOffsetCount;
    uint32_t const*        pDynamicOffsets;
};

struct CmdPushConstantsArgs
{
    VkCommandBuffer    commandBuffer;
    VkPipelineLayout   layout;
    VkShaderStageFlags stageFlags;
    uint32_t           offset;
    uint32_t           size;
    void const*        pValues;
};

struct CmdBindIndexBufferArgs
{
    VkCommandBuffer commandBuffer;
    VkBuffer        buffer;
    VkDeviceSize    offset;
    uint32_t        indexType;
};

struct CmdBindVertexBuffersArgs
{
    VkCommandBuffer     commandBuffer;
    uint32_t            firstBinding;
    uint32_t            bindingCount;
    VkBuffer const*     pBuffers;
    VkDeviceSize const* pOffsets;
};

struct CmdDrawArgs
{
    VkCommandBuffer commandBuffer;
    uint32_t        vertexCount;
    uint32_t        instanceCount;
    uint32_t        firstVertex;
    uint32_t        firstInstance;
};

struct CmdDrawIndexedArgs
{
    VkCommandBuffer commandBuffer;
    uint32_t        indexCount;
    uint32_t        instanceCount;
    uint32_t        firstIndex;
    int32_t         vertexOffset;
    uint32_t        firstInstance;
};

struct CmdDrawIndirectArgs
{
    VkCommandBuffer commandBuffer;
    VkBuffer        buffer;
    VkDeviceSize    offset;
    uint32_t        drawCount;
    uint32_t        stride;
};

struct CmdDrawIndexedIndirectArgs
{
    VkCommandBuffer commandBuffer;
    VkBuffer        buffer;
    VkDeviceSize    offset;
    uint32_t        drawCount;
    uint32_t        stride;
};

struct CmdDispatchArgs
{
    VkCommandBuffer commandBuffer;
    uint32_t        groupCountX;
    uint32_t        groupCountY;
    uint32_t        groupCountZ;
};

struct CmdDispatchIndirectArgs
{
    VkCommandBuffer commandBuffer;
    VkBuffer        buffer;
    VkDeviceSize    offset;
};

struct CreateImageArgs
{
    VkDevice                 device;
    VkImageCreateInfo const* pCreateInfo;
    AllocationCallbacks      pAllocator;
    VkImage*                 pImage;
};

struct CreateImageViewArgs
{
    VkDevice                     device;
    VkImageViewCreateInfo const* pCreateInfo;
    AllocationCallbacks          pAllocator;
    VkImageView*                 pView;
};

struct CmdBindPipelineArgs
{
    VkCommandBuffer commandBuffer;
    uint32_t        pipelineBindPoint;
    VkPipeline      pipeline;
};

struct CmdSetViewportArgs
{
    VkCommandBuffer   commandBuffer;
    uint32_t          firstViewport;
    uint32_t          viewportCount;
    VkViewport const* pViewports;
};

struct CmdSetScissorArgs
{
    VkCommandBuffer commandBuffer;
    uint32_t        firstScissor;
    uint32_t        scissorCount;
    VkRect2D const* pScissors;
};

struct CmdSetLineWidthArgs
{
    VkCommandBuffer commandBuffer;
    float           lineWidth;
};

struct CmdSetDepthBiasArgs
{
    VkCommandBuffer commandBuffer;
    float           depthBiasConstantFactor;
    float           depthBiasClamp;
    float           depthBiasSlopeFactor;
};

struct CmdSetBlendConstantsArgs
{
    VkCommandBuffer commandBuffer;
    float           blendConstants[4];
};

struct CmdSetDepthBoundsArgs
{
    VkCommandBuffer commandBuffer;
    float           minDepthBounds;
    float           maxDepthBounds;
};

struct CmdSetStencilCompareMaskArgs
{
    VkCommandBuffer    commandBuffer;
    VkStencilFaceFlags faceMask;
    uint32_t           compareMask;
};

struct CmdSetStencilWriteMaskArgs
{
    VkCommandBuffer    commandBuffer;
    VkStencilFaceFlags faceMask;
    uint32_t           writeMask;
};

struct CmdSetStencilReferenceArgs
{
    VkCommandBuffer    commandBuffer;
    VkStencilFaceFlags faceMask;
    uint32_t           reference;
};

struct CmdBeginQueryArgs
{
    VkCommandBuffer     commandBuffer;
    VkQueryPool         queryPool;
    uint32_t            query;
    VkQueryControlFlags flags;
};

struct CmdEndQueryArgs
{
    VkCommandBuffer commandBuffer;
    VkQueryPool     queryPool;
    uint32_t        query;
};

struct CmdResetQueryPoolArgs
{
    VkCommandBuffer commandBuffer;
    VkQueryPool     queryPool;
    uint32_t        firstQuery;
    uint32_t        queryCount;
};

struct CmdWriteTimestampArgs
{
    VkCommandBuffer commandBuffer;
    uint32_t        pipelineStage;
    VkQueryPool     queryPool;
    uint32_t        query;
};

struct CmdCopyQueryPoolResultsArgs
{
    VkCommandBuffer    commandBuffer;
    VkQueryPool        queryPool;
    uint32_t           firstQuery;
    uint32_t           queryCount;
    VkBuffer           dstBuffer;
    VkDeviceSize       dstOffset;
    VkDeviceSize       stride;
    VkQueryResultFlags flags;
};

struct QueueSubmitArgs
{
    VkQueue             queue;
    uint32_t            submitCount;
    VkSubmitInfo const* pSubmits;
    VkFence             fence;
};

struct CreateFramebufferArgs
{
    VkDevice                       device;
    VkFramebufferCreateInfo const* pCreateInfo;
    AllocationCallbacks            pAllocator;
    VkFramebuffer*                 pFramebuffer;
};

struct CreateRenderPassArgs
{
    VkDevice                      device;
    VkRenderPassCreateInfo const* pCreateInfo;
    AllocationCallbacks           pAllocator;
    VkRenderPass*                 pRenderPass;
};

struct CmdBeginRenderPassArgs
{
    VkCommandBuffer              commandBuffer;
    VkRenderPassBeginInfo const* pRenderPassBegin;
    uint32_t                     contents;
};

struct CmdNextSubpassArgs
{
    VkCommandBuffer commandBuffer;
    uint32_t        contents;
};

struct CmdEndRenderPassArgs
{
    VkCommandBuffer commandBuffer;
};

struct CmdSetEventArgs
{
    VkCommandBuffer      commandBuffer;
    VkEvent              event;
    VkPipelineStageFlags stageMask;
};

struct CmdResetEventArgs
{
    VkCommandBuffer      commandBuffer;
    VkEvent              event;
    VkPipelineStageFlags stageMask;
};

struct CmdWaitEventsArgs
{
    VkCommandBuffer              commandBuffer;
    uint32_t                     eventCount;
    VkEvent const*               pEvents;
    VkPipelineStageFlags         srcStageMask;
    VkPipelineStageFlags         dstStageMask;
    uint32_t                     memoryBarrierCount;
    VkMemoryBarrier const*       pMemoryBarriers;
    uint32_t                     bufferMemoryBarrierCount;
    VkBufferMemoryBarrier const* pBufferMemoryBarriers;
    uint32_t                     imageMemoryBarrierCount;
    VkImageMemoryBarrier const*  pImageMemoryBarriers;
};

struct CmdPipelineBarrierArgs
{
    VkCommandBuffer              commandBuffer;
    VkPipelineStageFlags         srcStageMask;
    VkPipelineStageFlags         dstStageMask;
    VkDependencyFlags            dependencyFlags;
    uint32_t                     memoryBarrierCount;
    VkMemoryBarrier const*       pMemoryBarriers;
    uint32_t                     bufferMemoryBarrierCount;
    VkBufferMemoryBarrier const* pBufferMemoryBarriers;
    uint32_t                     imageMemoryBarrierCount;
    VkImageMemoryBarrier const*  pImageMemoryBarriers;
};

struct CmdWriteBufferMarkerAMDArgs
{
    VkCommandBuffer commandBuffer;
    uint32_t        pipelineStage;
    VkBuffer        dstBuffer;
    VkDeviceSize    dstOffset;
    uint32_t        marker;
};

struct CmdDrawIndirectCountAMDArgs
{
    VkCommandBuffer commandBuffer;
    VkBuffer        buffer;
    VkDeviceSize    offset;
    VkBuffer        countBuffer;
    VkDeviceSize    countOffset;
    uint32_t        maxDrawCount;
    uint32_t        stride;
};

struct CmdDrawIndexedIndirectCountAMDArgs
{
    VkCommandBuffer commandBuffer;
    VkBuffer        buffer;
    VkDeviceSize    offset;
    VkBuffer        countBuffer;
    VkDeviceSize    countOffset;
    uint32_t        maxDrawCount;
    uint32_t        stride;
};

struct CmdBeginConditionalRenderingEXTArgs
{
    VkCommandBuffer                           commandBuffer;
    VkConditionalRenderingBeginInfoEXT const* pConditinalRenderingBegin;
};

struct CmdEndConditionalRenderingEXTArgs
{
    VkCommandBuffer commandBuffer;
};

struct CmdDebugMarkerBeginEXTArgs
{
    VkCommandBuffer                   commandBuffer;
    VkDebugMarkerMarkerInfoEXT const* pMarkerInfo;
};

struct CmdDebugMarkerEndEXTArgs
{
    VkCommandBuffer commandBuffer;
};

struct CmdDebugMarkerInsertEXTArgs
{
    VkCommandBuffer                   commandBuffer;
    VkDebugMarkerMarkerInfoEXT const* pMarkerInfo;
};

struct CmdBeginDebugUtilsLabelEXTArgs
{
    VkCommandBuffer             commandBuffer;
    VkDebugUtilsLabelEXT const* pLabelInfo;
};

struct CmdEndDebugUtilsLabelEXTArgs
{
    VkCommandBuffer commandBuffer;
};

struct CmdInsertDebugUtilsLabelEXTArgs
{
    VkCommandBuffer             commandBuffer;
    VkDebugUtilsLabelEXT const* pLabelInfo;
};

struct CmdSetDeviceMaskKHRArgs
{
    VkCommandBuffer commandBuffer;
    uint32_t        deviceMask;
};

struct CmdSetDeviceMaskArgs
{
    VkCommandBuffer commandBuffer;
    uint32_t        deviceMask;
};

struct CmdDispatchBaseKHRArgs
{
    VkCommandBuffer commandBuffer;
    uint32_t        baseGroupX;
    uint32_t        baseGroupY;
    uint32_t        baseGroupZ;
    uint32_t        groupCountX;
    uint32_t        groupCountY;
    uint32_t        groupCountZ;
};

struct CmdDispatchBaseArgs
{
    VkCommandBuffer commandBuffer;
    uint32_t        baseGroupX;
    uint32_t        baseGroupY;
    uint32_t        baseGroupZ;
    uint32_t        groupCountX;
    uint32_t        groupCountY;
    uint32_t        groupCountZ;
};

struct CmdDrawIndirectCountKHRArgs
{
    VkCommandBuffer commandBuffer;
    VkBuffer        buffer;
    VkDeviceSize    offset;
    VkBuffer        countBuffer;
    VkDeviceSize    countOffset;
    uint32_t        maxDrawCount;
    uint32_t        stride;
};

struct CmdDrawIndexedIndirectCountKHRArgs
{
    VkCommandBuffer commandBuffer;
    VkBuffer        buffer;
    VkDeviceSize    offset;
    VkBuffer        countBuffer;
    VkDeviceSize    countOffset;
    uint32_t        maxDrawCount;
    uint32_t        stride;
};

inline constexpr size_t AlignUp(size_t size)
{
    constexpr const size_t kAlignment = 8;
    return (size + kAlignment - 1) & ~(kAlignment - 1);
}

template<typename T> inline size_t GetArraySize(const T* src, uint64_t start_index, uint64_t count)
{
    return AlignUp(sizeof(T) * count);
}

template<>
inline size_t GetArraySize(const VkBufferCreateInfo* src, uint64_t start_index, uint64_t count);

template<>
inline size_t GetArraySize(const VkBufferViewCreateInfo* src, uint64_t start_index, uint64_t count);

template<>
inline size_t GetArraySize(const VkCommandBufferBeginInfo* src,
                           uint64_t                        start_index,
                           uint64_t                        count);

template<>
inline size_t GetArraySize(const VkBufferCopy* src, uint64_t start_index, uint64_t count);

template<> inline size_t GetArraySize(const VkImageCopy* src, uint64_t start_index, uint64_t count);

template<> inline size_t GetArraySize(const VkImageBlit* src, uint64_t start_index, uint64_t count);

template<>
inline size_t GetArraySize(const VkBufferImageCopy* src, uint64_t start_index, uint64_t count);

template<>
inline size_t GetArraySize(const VkClearColorValue* src, uint64_t start_index, uint64_t count);

template<>
inline size_t GetArraySize(const VkImageSubresourceRange* src,
                           uint64_t                       start_index,
                           uint64_t                       count);

template<>
inline size_t GetArraySize(const VkClearDepthStencilValue* src,
                           uint64_t                        start_index,
                           uint64_t                        count);

template<>
inline size_t GetArraySize(const VkClearAttachment* src, uint64_t start_index, uint64_t count);

template<> inline size_t GetArraySize(const VkClearRect* src, uint64_t start_index, uint64_t count);

template<>
inline size_t GetArraySize(const VkImageResolve* src, uint64_t start_index, uint64_t count);

template<>
inline size_t GetArraySize(const VkDescriptorSetLayoutCreateInfo* src,
                           uint64_t                               start_index,
                           uint64_t                               count);

template<>
inline size_t GetArraySize(const VkDescriptorSetAllocateInfo* src,
                           uint64_t                           start_index,
                           uint64_t                           count);

template<>
inline size_t GetArraySize(const VkWriteDescriptorSet* src, uint64_t start_index, uint64_t count);

template<>
inline size_t GetArraySize(const VkCopyDescriptorSet* src, uint64_t start_index, uint64_t count);

template<>
inline size_t GetArraySize(const VkImageCreateInfo* src, uint64_t start_index, uint64_t count);

template<>
inline size_t GetArraySize(const VkImageViewCreateInfo* src, uint64_t start_index, uint64_t count);

template<> inline size_t GetArraySize(const VkViewport* src, uint64_t start_index, uint64_t count);

template<> inline size_t GetArraySize(const VkRect2D* src, uint64_t start_index, uint64_t count);

template<>
inline size_t GetArraySize(const VkSubmitInfo* src, uint64_t start_index, uint64_t count);

template<>
inline size_t GetArraySize(const VkFramebufferCreateInfo* src,
                           uint64_t                       start_index,
                           uint64_t                       count);

template<>
inline size_t GetArraySize(const VkRenderPassCreateInfo* src, uint64_t start_index, uint64_t count);

template<>
inline size_t GetArraySize(const VkRenderPassBeginInfo* src, uint64_t start_index, uint64_t count);

template<>
inline size_t GetArraySize(const VkMemoryBarrier* src, uint64_t start_index, uint64_t count);

template<>
inline size_t GetArraySize(const VkBufferMemoryBarrier* src, uint64_t start_index, uint64_t count);

template<>
inline size_t GetArraySize(const VkImageMemoryBarrier* src, uint64_t start_index, uint64_t count);

template<>
inline size_t GetArraySize(const VkConditionalRenderingBeginInfoEXT* src,
                           uint64_t                                  start_index,
                           uint64_t                                  count);

template<>
inline size_t GetArraySize(const VkDebugMarkerMarkerInfoEXT* src,
                           uint64_t                          start_index,
                           uint64_t                          count);

template<>
inline size_t GetArraySize(const VkDebugUtilsLabelEXT* src, uint64_t start_index, uint64_t count);

template<>
inline size_t GetArraySize(const VkCommandBufferInheritanceInfo* src,
                           uint64_t                              start_index,
                           uint64_t                              count);

template<>
inline size_t GetArraySize(const VkImageSubresourceLayers* src,
                           uint64_t                        start_index,
                           uint64_t                        count);

template<> inline size_t GetArraySize(const VkOffset3D* src, uint64_t start_index, uint64_t count);

template<> inline size_t GetArraySize(const VkExtent3D* src, uint64_t start_index, uint64_t count);

template<>
inline size_t GetArraySize(const VkClearValue* src, uint64_t start_index, uint64_t count);

template<>
inline size_t GetArraySize(const VkDescriptorSetLayoutBinding* src,
                           uint64_t                            start_index,
                           uint64_t                            count);

template<>
inline size_t GetArraySize(const VkDescriptorImageInfo* src, uint64_t start_index, uint64_t count);

template<>
inline size_t GetArraySize(const VkDescriptorBufferInfo* src, uint64_t start_index, uint64_t count);

template<>
inline size_t GetArraySize(const VkComponentMapping* src, uint64_t start_index, uint64_t count);

template<> inline size_t GetArraySize(const VkOffset2D* src, uint64_t start_index, uint64_t count);

template<> inline size_t GetArraySize(const VkExtent2D* src, uint64_t start_index, uint64_t count);

template<>
inline size_t GetArraySize(const VkAttachmentDescription* src,
                           uint64_t                       start_index,
                           uint64_t                       count);

template<>
inline size_t GetArraySize(const VkSubpassDescription* src, uint64_t start_index, uint64_t count);

template<>
inline size_t GetArraySize(const VkSubpassDependency* src, uint64_t start_index, uint64_t count);

size_t GetCreateBufferArgsSize(VkDevice                  device,
                               VkBufferCreateInfo const* pCreateInfo,
                               AllocationCallbacks       pAllocator,
                               VkBuffer*                 pBuffer);

size_t GetCreateBufferViewArgsSize(VkDevice                      device,
                                   VkBufferViewCreateInfo const* pCreateInfo,
                                   AllocationCallbacks           pAllocator,
                                   VkBufferView*                 pView);

size_t GetBeginCommandBufferArgsSize(VkCommandBuffer                 commandBuffer,
                                     VkCommandBufferBeginInfo const* pBeginInfo);

size_t GetEndCommandBufferArgsSize(VkCommandBuffer commandBuffer);

size_t GetResetCommandBufferArgsSize(VkCommandBuffer           commandBuffer,
                                     VkCommandBufferResetFlags flags);

size_t GetCmdExecuteCommandsArgsSize(VkCommandBuffer        commandBuffer,
                                     uint32_t               commandBufferCount,
                                     VkCommandBuffer const* pCommandBuffers);

size_t GetCmdCopyBufferArgsSize(VkCommandBuffer     commandBuffer,
                                VkBuffer            srcBuffer,
                                VkBuffer            dstBuffer,
                                uint32_t            regionCount,
                                VkBufferCopy const* pRegions);

size_t GetCmdCopyImageArgsSize(VkCommandBuffer    commandBuffer,
                               VkImage            srcImage,
                               uint32_t           srcImageLayout,
                               VkImage            dstImage,
                               uint32_t           dstImageLayout,
                               uint32_t           regionCount,
                               VkImageCopy const* pRegions);

size_t GetCmdBlitImageArgsSize(VkCommandBuffer    commandBuffer,
                               VkImage            srcImage,
                               uint32_t           srcImageLayout,
                               VkImage            dstImage,
                               uint32_t           dstImageLayout,
                               uint32_t           regionCount,
                               VkImageBlit const* pRegions,
                               uint32_t           filter);

size_t GetCmdCopyBufferToImageArgsSize(VkCommandBuffer          commandBuffer,
                                       VkBuffer                 srcBuffer,
                                       VkImage                  dstImage,
                                       uint32_t                 dstImageLayout,
                                       uint32_t                 regionCount,
                                       VkBufferImageCopy const* pRegions);

size_t GetCmdCopyImageToBufferArgsSize(VkCommandBuffer          commandBuffer,
                                       VkImage                  srcImage,
                                       uint32_t                 srcImageLayout,
                                       VkBuffer                 dstBuffer,
                                       uint32_t                 regionCount,
                                       VkBufferImageCopy const* pRegions);

size_t GetCmdUpdateBufferArgsSize(VkCommandBuffer commandBuffer,
                                  VkBuffer        dstBuffer,
                                  VkDeviceSize    dstOffset,
                                  VkDeviceSize    dataSize,
                                  void const*     pData);

size_t GetCmdFillBufferArgsSize(VkCommandBuffer commandBuffer,
                                VkBuffer        dstBuffer,
                                VkDeviceSize    dstOffset,
                                VkDeviceSize    size,
                                uint32_t        data);

size_t GetCmdClearColorImageArgsSize(VkCommandBuffer                commandBuffer,
                                     VkImage                        image,
                                     uint32_t                       imageLayout,
                                     VkClearColorValue const*       pColor,
                                     uint32_t                       rangeCount,
                                     VkImageSubresourceRange const* pRanges);

size_t GetCmdClearDepthStencilImageArgsSize(VkCommandBuffer                 commandBuffer,
                                            VkImage                         image,
                                            uint32_t                        imageLayout,
                                            VkClearDepthStencilValue const* pDepthStencil,
                                            uint32_t                        rangeCount,
                                            VkImageSubresourceRange const*  pRanges);

size_t GetCmdClearAttachmentsArgsSize(VkCommandBuffer          commandBuffer,
                                      uint32_t                 attachmentCount,
                                      VkClearAttachment const* pAttachments,
                                      uint32_t                 rectCount,
                                      VkClearRect const*       pRects);

size_t GetCmdResolveImageArgsSize(VkCommandBuffer       commandBuffer,
                                  VkImage               srcImage,
                                  uint32_t              srcImageLayout,
                                  VkImage               dstImage,
                                  uint32_t              dstImageLayout,
                                  uint32_t              regionCount,
                                  VkImageResolve const* pRegions);

size_t GetCreateDescriptorSetLayoutArgsSize(VkDevice                               device,
                                            VkDescriptorSetLayoutCreateInfo const* pCreateInfo,
                                            AllocationCallbacks                    pAllocator,
                                            VkDescriptorSetLayout*                 pSetLayout);

size_t GetAllocateDescriptorSetsArgsSize(VkDevice                           device,
                                         VkDescriptorSetAllocateInfo const* pAllocateInfo,
                                         VkDescriptorSet*                   pDescriptorSets);

size_t GetUpdateDescriptorSetsArgsSize(VkDevice                    device,
                                       uint32_t                    descriptorWriteCount,
                                       VkWriteDescriptorSet const* pDescriptorWrites,
                                       uint32_t                    descriptorCopyCount,
                                       VkCopyDescriptorSet const*  pDescriptorCopies);

size_t GetCmdBindDescriptorSetsArgsSize(VkCommandBuffer        commandBuffer,
                                        uint32_t               pipelineBindPoint,
                                        VkPipelineLayout       layout,
                                        uint32_t               firstSet,
                                        uint32_t               descriptorSetCount,
                                        VkDescriptorSet const* pDescriptorSets,
                                        uint32_t               dynamicOffsetCount,
                                        uint32_t const*        pDynamicOffsets);

size_t GetCmdPushConstantsArgsSize(VkCommandBuffer    commandBuffer,
                                   VkPipelineLayout   layout,
                                   VkShaderStageFlags stageFlags,
                                   uint32_t           offset,
                                   uint32_t           size,
                                   void const*        pValues);

size_t GetCmdBindIndexBufferArgsSize(VkCommandBuffer commandBuffer,
                                     VkBuffer        buffer,
                                     VkDeviceSize    offset,
                                     uint32_t        indexType);

size_t GetCmdBindVertexBuffersArgsSize(VkCommandBuffer     commandBuffer,
                                       uint32_t            firstBinding,
                                       uint32_t            bindingCount,
                                       VkBuffer const*     pBuffers,
                                       VkDeviceSize const* pOffsets);

size_t GetCmdDrawArgsSize(VkCommandBuffer commandBuffer,
                          uint32_t        vertexCount,
                          uint32_t        instanceCount,
                          uint32_t        firstVertex,
                          uint32_t        firstInstance);

size_t GetCmdDrawIndexedArgsSize(VkCommandBuffer commandBuffer,
                                 uint32_t        indexCount,
                                 uint32_t        instanceCount,
                                 uint32_t        firstIndex,
                                 int32_t         vertexOffset,
                                 uint32_t        firstInstance);

size_t GetCmdDrawIndirectArgsSize(VkCommandBuffer commandBuffer,
                                  VkBuffer        buffer,
                                  VkDeviceSize    offset,
                                  uint32_t        drawCount,
                                  uint32_t        stride);

size_t GetCmdDrawIndexedIndirectArgsSize(VkCommandBuffer commandBuffer,
                                         VkBuffer        buffer,
                                         VkDeviceSize    offset,
                                         uint32_t        drawCount,
                                         uint32_t        stride);

size_t GetCmdDispatchArgsSize(VkCommandBuffer commandBuffer,
                              uint32_t        groupCountX,
                              uint32_t        groupCountY,
                              uint32_t        groupCountZ);

size_t GetCmdDispatchIndirectArgsSize(VkCommandBuffer commandBuffer,
                                      VkBuffer        buffer,
                                      VkDeviceSize    offset);

size_t GetCreateImageArgsSize(VkDevice                 device,
                              VkImageCreateInfo const* pCreateInfo,
                              AllocationCallbacks      pAllocator,
                              VkImage*                 pImage);

size_t GetCreateImageViewArgsSize(VkDevice                     device,
                                  VkImageViewCreateInfo const* pCreateInfo,
                                  AllocationCallbacks          pAllocator,
                                  VkImageView*                 pView);

size_t GetCmdBindPipelineArgsSize(VkCommandBuffer commandBuffer,
                                  uint32_t        pipelineBindPoint,
                                  VkPipeline      pipeline);

size_t GetCmdSetViewportArgsSize(VkCommandBuffer   commandBuffer,
                                 uint32_t          firstViewport,
                                 uint32_t          viewportCount,
                                 VkViewport const* pViewports);

size_t GetCmdSetScissorArgsSize(VkCommandBuffer commandBuffer,
                                uint32_t        firstScissor,
                                uint32_t        scissorCount,
                                VkRect2D const* pScissors);

size_t GetCmdSetLineWidthArgsSize(VkCommandBuffer commandBuffer, float lineWidth);

size_t GetCmdSetDepthBiasArgsSize(VkCommandBuffer commandBuffer,
                                  float           depthBiasConstantFactor,
                                  float           depthBiasClamp,
                                  float           depthBiasSlopeFactor);

size_t GetCmdSetBlendConstantsArgsSize(VkCommandBuffer commandBuffer, float blendConstants[4]);

size_t GetCmdSetDepthBoundsArgsSize(VkCommandBuffer commandBuffer,
                                    float           minDepthBounds,
                                    float           maxDepthBounds);

size_t GetCmdSetStencilCompareMaskArgsSize(VkCommandBuffer    commandBuffer,
                                           VkStencilFaceFlags faceMask,
                                           uint32_t           compareMask);

size_t GetCmdSetStencilWriteMaskArgsSize(VkCommandBuffer    commandBuffer,
                                         VkStencilFaceFlags faceMask,
                                         uint32_t           writeMask);

size_t GetCmdSetStencilReferenceArgsSize(VkCommandBuffer    commandBuffer,
                                         VkStencilFaceFlags faceMask,
                                         uint32_t           reference);

size_t GetCmdBeginQueryArgsSize(VkCommandBuffer     commandBuffer,
                                VkQueryPool         queryPool,
                                uint32_t            query,
                                VkQueryControlFlags flags);

size_t GetCmdEndQueryArgsSize(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query);

size_t GetCmdResetQueryPoolArgsSize(VkCommandBuffer commandBuffer,
                                    VkQueryPool     queryPool,
                                    uint32_t        firstQuery,
                                    uint32_t        queryCount);

size_t GetCmdWriteTimestampArgsSize(VkCommandBuffer commandBuffer,
                                    uint32_t        pipelineStage,
                                    VkQueryPool     queryPool,
                                    uint32_t        query);

size_t GetCmdCopyQueryPoolResultsArgsSize(VkCommandBuffer    commandBuffer,
                                          VkQueryPool        queryPool,
                                          uint32_t           firstQuery,
                                          uint32_t           queryCount,
                                          VkBuffer           dstBuffer,
                                          VkDeviceSize       dstOffset,
                                          VkDeviceSize       stride,
                                          VkQueryResultFlags flags);

size_t GetQueueSubmitArgsSize(VkQueue             queue,
                              uint32_t            submitCount,
                              VkSubmitInfo const* pSubmits,
                              VkFence             fence);

size_t GetCreateFramebufferArgsSize(VkDevice                       device,
                                    VkFramebufferCreateInfo const* pCreateInfo,
                                    AllocationCallbacks            pAllocator,
                                    VkFramebuffer*                 pFramebuffer);

size_t GetCreateRenderPassArgsSize(VkDevice                      device,
                                   VkRenderPassCreateInfo const* pCreateInfo,
                                   AllocationCallbacks           pAllocator,
                                   VkRenderPass*                 pRenderPass);

size_t GetCmdBeginRenderPassArgsSize(VkCommandBuffer              commandBuffer,
                                     VkRenderPassBeginInfo const* pRenderPassBegin,
                                     uint32_t                     contents);

size_t GetCmdNextSubpassArgsSize(VkCommandBuffer commandBuffer, uint32_t contents);

size_t GetCmdEndRenderPassArgsSize(VkCommandBuffer commandBuffer);

size_t GetCmdSetEventArgsSize(VkCommandBuffer      commandBuffer,
                              VkEvent              event,
                              VkPipelineStageFlags stageMask);

size_t GetCmdResetEventArgsSize(VkCommandBuffer      commandBuffer,
                                VkEvent              event,
                                VkPipelineStageFlags stageMask);

size_t GetCmdWaitEventsArgsSize(VkCommandBuffer              commandBuffer,
                                uint32_t                     eventCount,
                                VkEvent const*               pEvents,
                                VkPipelineStageFlags         srcStageMask,
                                VkPipelineStageFlags         dstStageMask,
                                uint32_t                     memoryBarrierCount,
                                VkMemoryBarrier const*       pMemoryBarriers,
                                uint32_t                     bufferMemoryBarrierCount,
                                VkBufferMemoryBarrier const* pBufferMemoryBarriers,
                                uint32_t                     imageMemoryBarrierCount,
                                VkImageMemoryBarrier const*  pImageMemoryBarriers);

size_t GetCmdPipelineBarrierArgsSize(VkCommandBuffer              commandBuffer,
                                     VkPipelineStageFlags         srcStageMask,
                                     VkPipelineStageFlags         dstStageMask,
                                     VkDependencyFlags            dependencyFlags,
                                     uint32_t                     memoryBarrierCount,
                                     VkMemoryBarrier const*       pMemoryBarriers,
                                     uint32_t                     bufferMemoryBarrierCount,
                                     VkBufferMemoryBarrier const* pBufferMemoryBarriers,
                                     uint32_t                     imageMemoryBarrierCount,
                                     VkImageMemoryBarrier const*  pImageMemoryBarriers);

size_t GetCmdWriteBufferMarkerAMDArgsSize(VkCommandBuffer commandBuffer,
                                          uint32_t        pipelineStage,
                                          VkBuffer        dstBuffer,
                                          VkDeviceSize    dstOffset,
                                          uint32_t        marker);

size_t GetCmdDrawIndirectCountAMDArgsSize(VkCommandBuffer commandBuffer,
                                          VkBuffer        buffer,
                                          VkDeviceSize    offset,
                                          VkBuffer        countBuffer,
                                          VkDeviceSize    countOffset,
                                          uint32_t        maxDrawCount,
                                          uint32_t        stride);

size_t GetCmdDrawIndexedIndirectCountAMDArgsSize(VkCommandBuffer commandBuffer,
                                                 VkBuffer        buffer,
                                                 VkDeviceSize    offset,
                                                 VkBuffer        countBuffer,
                                                 VkDeviceSize    countOffset,
                                                 uint32_t        maxDrawCount,
                                                 uint32_t        stride);

size_t GetCmdBeginConditionalRenderingEXTArgsSize(
VkCommandBuffer                           commandBuffer,
VkConditionalRenderingBeginInfoEXT const* pConditinalRenderingBegin);

size_t GetCmdEndConditionalRenderingEXTArgsSize(VkCommandBuffer commandBuffer);

size_t GetCmdDebugMarkerBeginEXTArgsSize(VkCommandBuffer                   commandBuffer,
                                         VkDebugMarkerMarkerInfoEXT const* pMarkerInfo);

size_t GetCmdDebugMarkerEndEXTArgsSize(VkCommandBuffer commandBuffer);

size_t GetCmdDebugMarkerInsertEXTArgsSize(VkCommandBuffer                   commandBuffer,
                                          VkDebugMarkerMarkerInfoEXT const* pMarkerInfo);

size_t GetCmdBeginDebugUtilsLabelEXTArgsSize(VkCommandBuffer             commandBuffer,
                                             VkDebugUtilsLabelEXT const* pLabelInfo);

size_t GetCmdEndDebugUtilsLabelEXTArgsSize(VkCommandBuffer commandBuffer);

size_t GetCmdInsertDebugUtilsLabelEXTArgsSize(VkCommandBuffer             commandBuffer,
                                              VkDebugUtilsLabelEXT const* pLabelInfo);

size_t GetCmdSetDeviceMaskKHRArgsSize(VkCommandBuffer commandBuffer, uint32_t deviceMask);

size_t GetCmdSetDeviceMaskArgsSize(VkCommandBuffer commandBuffer, uint32_t deviceMask);

size_t GetCmdDispatchBaseKHRArgsSize(VkCommandBuffer commandBuffer,
                                     uint32_t        baseGroupX,
                                     uint32_t        baseGroupY,
                                     uint32_t        baseGroupZ,
                                     uint32_t        groupCountX,
                                     uint32_t        groupCountY,
                                     uint32_t        groupCountZ);

size_t GetCmdDispatchBaseArgsSize(VkCommandBuffer commandBuffer,
                                  uint32_t        baseGroupX,
                                  uint32_t        baseGroupY,
                                  uint32_t        baseGroupZ,
                                  uint32_t        groupCountX,
                                  uint32_t        groupCountY,
                                  uint32_t        groupCountZ);

size_t GetCmdDrawIndirectCountKHRArgsSize(VkCommandBuffer commandBuffer,
                                          VkBuffer        buffer,
                                          VkDeviceSize    offset,
                                          VkBuffer        countBuffer,
                                          VkDeviceSize    countOffset,
                                          uint32_t        maxDrawCount,
                                          uint32_t        stride);

size_t GetCmdDrawIndexedIndirectCountKHRArgsSize(VkCommandBuffer commandBuffer,
                                                 VkBuffer        buffer,
                                                 VkDeviceSize    offset,
                                                 VkBuffer        countBuffer,
                                                 VkDeviceSize    countOffset,
                                                 uint32_t        maxDrawCount,
                                                 uint32_t        stride);

}  // namespace Dive