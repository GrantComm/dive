/*
 * Copyright (C) 2020 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * THIS FILE WAS GENERATED BY apic. DO NOT EDIT.
 */

#pragma once

#include <cstring>
#include <iostream>
#include <vector>

#include "command_arguments.h"
#include "dive_core/common/dive_capture_format.h"
#include "linear_allocator.h"
#include "vulkan_metadata.h"

namespace Dive
{

class CommandDecoder
{
public:
    using AllocatorType = DynamicLinearAllocator<>;
    explicit CommandDecoder(AllocatorType                   *allocator,
                            const VulkanMetadataBlockHeader &metadata_version) :
        m_allocator(allocator),
        m_metadata_version(metadata_version)
    {
        m_allocator_start_size = m_allocator->AllocatedSize();
    }
    void                          *Decode(VKCmdID cmdId, const char *data, size_t data_size);
    CreateBufferArgs              *DecodeCreateBuffer(const char *data, size_t data_size);
    CreateBufferViewArgs          *DecodeCreateBufferView(const char *data, size_t data_size);
    BeginCommandBufferArgs        *DecodeBeginCommandBuffer(const char *data, size_t data_size);
    EndCommandBufferArgs          *DecodeEndCommandBuffer(const char *data, size_t data_size);
    ResetCommandBufferArgs        *DecodeResetCommandBuffer(const char *data, size_t data_size);
    CmdExecuteCommandsArgs        *DecodeCmdExecuteCommands(const char *data, size_t data_size);
    CmdCopyBufferArgs             *DecodeCmdCopyBuffer(const char *data, size_t data_size);
    CmdCopyImageArgs              *DecodeCmdCopyImage(const char *data, size_t data_size);
    CmdBlitImageArgs              *DecodeCmdBlitImage(const char *data, size_t data_size);
    CmdCopyBufferToImageArgs      *DecodeCmdCopyBufferToImage(const char *data, size_t data_size);
    CmdCopyImageToBufferArgs      *DecodeCmdCopyImageToBuffer(const char *data, size_t data_size);
    CmdUpdateBufferArgs           *DecodeCmdUpdateBuffer(const char *data, size_t data_size);
    CmdFillBufferArgs             *DecodeCmdFillBuffer(const char *data, size_t data_size);
    CmdClearColorImageArgs        *DecodeCmdClearColorImage(const char *data, size_t data_size);
    CmdClearDepthStencilImageArgs *DecodeCmdClearDepthStencilImage(const char *data,
                                                                   size_t      data_size);
    CmdClearAttachmentsArgs       *DecodeCmdClearAttachments(const char *data, size_t data_size);
    CmdResolveImageArgs           *DecodeCmdResolveImage(const char *data, size_t data_size);
    CreateDescriptorSetLayoutArgs *DecodeCreateDescriptorSetLayout(const char *data,
                                                                   size_t      data_size);
    AllocateDescriptorSetsArgs    *DecodeAllocateDescriptorSets(const char *data, size_t data_size);
    UpdateDescriptorSetsArgs      *DecodeUpdateDescriptorSets(const char *data, size_t data_size);
    CmdBindDescriptorSetsArgs     *DecodeCmdBindDescriptorSets(const char *data, size_t data_size);
    CmdPushConstantsArgs          *DecodeCmdPushConstants(const char *data, size_t data_size);
    CmdBindIndexBufferArgs        *DecodeCmdBindIndexBuffer(const char *data, size_t data_size);
    CmdBindVertexBuffersArgs      *DecodeCmdBindVertexBuffers(const char *data, size_t data_size);
    CmdDrawArgs                   *DecodeCmdDraw(const char *data, size_t data_size);
    CmdDrawIndexedArgs            *DecodeCmdDrawIndexed(const char *data, size_t data_size);
    CmdDrawIndirectArgs           *DecodeCmdDrawIndirect(const char *data, size_t data_size);
    CmdDrawIndexedIndirectArgs    *DecodeCmdDrawIndexedIndirect(const char *data, size_t data_size);
    CmdDispatchArgs               *DecodeCmdDispatch(const char *data, size_t data_size);
    CmdDispatchIndirectArgs       *DecodeCmdDispatchIndirect(const char *data, size_t data_size);
    CreateImageArgs               *DecodeCreateImage(const char *data, size_t data_size);
    CreateImageViewArgs           *DecodeCreateImageView(const char *data, size_t data_size);
    CmdBindPipelineArgs           *DecodeCmdBindPipeline(const char *data, size_t data_size);
    CmdSetViewportArgs            *DecodeCmdSetViewport(const char *data, size_t data_size);
    CmdSetScissorArgs             *DecodeCmdSetScissor(const char *data, size_t data_size);
    CmdSetLineWidthArgs           *DecodeCmdSetLineWidth(const char *data, size_t data_size);
    CmdSetDepthBiasArgs           *DecodeCmdSetDepthBias(const char *data, size_t data_size);
    CmdSetBlendConstantsArgs      *DecodeCmdSetBlendConstants(const char *data, size_t data_size);
    CmdSetDepthBoundsArgs         *DecodeCmdSetDepthBounds(const char *data, size_t data_size);
    CmdSetStencilCompareMaskArgs  *DecodeCmdSetStencilCompareMask(const char *data,
                                                                  size_t      data_size);
    CmdSetStencilWriteMaskArgs    *DecodeCmdSetStencilWriteMask(const char *data, size_t data_size);
    CmdSetStencilReferenceArgs    *DecodeCmdSetStencilReference(const char *data, size_t data_size);
    CmdBeginQueryArgs             *DecodeCmdBeginQuery(const char *data, size_t data_size);
    CmdEndQueryArgs               *DecodeCmdEndQuery(const char *data, size_t data_size);
    CmdResetQueryPoolArgs         *DecodeCmdResetQueryPool(const char *data, size_t data_size);
    CmdWriteTimestampArgs         *DecodeCmdWriteTimestamp(const char *data, size_t data_size);
    CmdCopyQueryPoolResultsArgs *DecodeCmdCopyQueryPoolResults(const char *data, size_t data_size);
    QueueSubmitArgs             *DecodeQueueSubmit(const char *data, size_t data_size);
    CreateFramebufferArgs       *DecodeCreateFramebuffer(const char *data, size_t data_size);
    CreateRenderPassArgs        *DecodeCreateRenderPass(const char *data, size_t data_size);
    CmdBeginRenderPassArgs      *DecodeCmdBeginRenderPass(const char *data, size_t data_size);
    CmdNextSubpassArgs          *DecodeCmdNextSubpass(const char *data, size_t data_size);
    CmdEndRenderPassArgs        *DecodeCmdEndRenderPass(const char *data, size_t data_size);
    CmdSetEventArgs             *DecodeCmdSetEvent(const char *data, size_t data_size);
    CmdResetEventArgs           *DecodeCmdResetEvent(const char *data, size_t data_size);
    CmdWaitEventsArgs           *DecodeCmdWaitEvents(const char *data, size_t data_size);
    CmdPipelineBarrierArgs      *DecodeCmdPipelineBarrier(const char *data, size_t data_size);
    CmdWriteBufferMarkerAMDArgs *DecodeCmdWriteBufferMarkerAMD(const char *data, size_t data_size);
    CmdDrawIndirectCountAMDArgs *DecodeCmdDrawIndirectCountAMD(const char *data, size_t data_size);
    CmdDrawIndexedIndirectCountAMDArgs  *DecodeCmdDrawIndexedIndirectCountAMD(const char *data,
                                                                              size_t      data_size);
    CmdBeginConditionalRenderingEXTArgs *DecodeCmdBeginConditionalRenderingEXT(const char *data,
                                                                               size_t data_size);
    CmdEndConditionalRenderingEXTArgs   *DecodeCmdEndConditionalRenderingEXT(const char *data,
                                                                             size_t      data_size);
    CmdDebugMarkerBeginEXTArgs  *DecodeCmdDebugMarkerBeginEXT(const char *data, size_t data_size);
    CmdDebugMarkerEndEXTArgs    *DecodeCmdDebugMarkerEndEXT(const char *data, size_t data_size);
    CmdDebugMarkerInsertEXTArgs *DecodeCmdDebugMarkerInsertEXT(const char *data, size_t data_size);
    CmdBeginDebugUtilsLabelEXTArgs  *DecodeCmdBeginDebugUtilsLabelEXT(const char *data,
                                                                      size_t      data_size);
    CmdEndDebugUtilsLabelEXTArgs    *DecodeCmdEndDebugUtilsLabelEXT(const char *data,
                                                                    size_t      data_size);
    CmdInsertDebugUtilsLabelEXTArgs *DecodeCmdInsertDebugUtilsLabelEXT(const char *data,
                                                                       size_t      data_size);
    CmdSetDeviceMaskKHRArgs         *DecodeCmdSetDeviceMaskKHR(const char *data, size_t data_size);
    CmdSetDeviceMaskArgs            *DecodeCmdSetDeviceMask(const char *data, size_t data_size);
    CmdDispatchBaseKHRArgs          *DecodeCmdDispatchBaseKHR(const char *data, size_t data_size);
    CmdDispatchBaseArgs             *DecodeCmdDispatchBase(const char *data, size_t data_size);
    CmdDrawIndirectCountKHRArgs *DecodeCmdDrawIndirectCountKHR(const char *data, size_t data_size);
    CmdDrawIndexedIndirectCountKHRArgs *DecodeCmdDrawIndexedIndirectCountKHR(const char *data,
                                                                             size_t      data_size);
    inline size_t                       NextDecodeOffset()
    {
        // NextDecodeOffset is used to find the address of next paramters, so need to aligned.
        return AlignUp(m_allocator->AllocatedSize() - m_allocator_start_size);
    }
    inline size_t DecodedArgsSize()
    {
        return m_allocator->AllocatedSize() - m_allocator_start_size;
    }
    uint64_t GetDataSize() { return m_data_size; }

private:
    template<typename T> T *Alloc() { return new (m_allocator->Alloc(sizeof(T))) T; }
    template<typename T> T *CopyArray(const T *src, uint64_t start_index, uint64_t count)
    {
        size_t alloc_size = sizeof(T) * count;
        if (NextDecodeOffset() + alloc_size > m_data_size)
        {
            return nullptr;
        }
        auto ptr = reinterpret_cast<T *>(m_allocator->Alloc(alloc_size));
        if (ptr != nullptr)
        {
            std::memcpy(ptr, src, alloc_size);
        }
        return ptr;
    }
    VkBufferCreateInfo *CopyArray(const VkBufferCreateInfo *src,
                                  uint64_t                  start_index,
                                  uint64_t                  count);

    VkBufferViewCreateInfo *CopyArray(const VkBufferViewCreateInfo *src,
                                      uint64_t                      start_index,
                                      uint64_t                      count);

    VkCommandBufferBeginInfo *CopyArray(const VkCommandBufferBeginInfo *src,
                                        uint64_t                        start_index,
                                        uint64_t                        count);

    VkBufferCopy *CopyArray(const VkBufferCopy *src, uint64_t start_index, uint64_t count);

    VkImageCopy *CopyArray(const VkImageCopy *src, uint64_t start_index, uint64_t count);

    VkImageBlit *CopyArray(const VkImageBlit *src, uint64_t start_index, uint64_t count);

    VkBufferImageCopy *CopyArray(const VkBufferImageCopy *src,
                                 uint64_t                 start_index,
                                 uint64_t                 count);

    VkClearColorValue *CopyArray(const VkClearColorValue *src,
                                 uint64_t                 start_index,
                                 uint64_t                 count);

    VkImageSubresourceRange *CopyArray(const VkImageSubresourceRange *src,
                                       uint64_t                       start_index,
                                       uint64_t                       count);

    VkClearDepthStencilValue *CopyArray(const VkClearDepthStencilValue *src,
                                        uint64_t                        start_index,
                                        uint64_t                        count);

    VkClearAttachment *CopyArray(const VkClearAttachment *src,
                                 uint64_t                 start_index,
                                 uint64_t                 count);

    VkClearRect *CopyArray(const VkClearRect *src, uint64_t start_index, uint64_t count);

    VkImageResolve *CopyArray(const VkImageResolve *src, uint64_t start_index, uint64_t count);

    VkDescriptorSetLayoutCreateInfo *CopyArray(const VkDescriptorSetLayoutCreateInfo *src,
                                               uint64_t                               start_index,
                                               uint64_t                               count);

    VkDescriptorSetAllocateInfo *CopyArray(const VkDescriptorSetAllocateInfo *src,
                                           uint64_t                           start_index,
                                           uint64_t                           count);

    VkWriteDescriptorSet *CopyArray(const VkWriteDescriptorSet *src,
                                    uint64_t                    start_index,
                                    uint64_t                    count);

    VkCopyDescriptorSet *CopyArray(const VkCopyDescriptorSet *src,
                                   uint64_t                   start_index,
                                   uint64_t                   count);

    VkImageCreateInfo *CopyArray(const VkImageCreateInfo *src,
                                 uint64_t                 start_index,
                                 uint64_t                 count);

    VkImageViewCreateInfo *CopyArray(const VkImageViewCreateInfo *src,
                                     uint64_t                     start_index,
                                     uint64_t                     count);

    VkViewport *CopyArray(const VkViewport *src, uint64_t start_index, uint64_t count);

    VkRect2D *CopyArray(const VkRect2D *src, uint64_t start_index, uint64_t count);

    VkSubmitInfo *CopyArray(const VkSubmitInfo *src, uint64_t start_index, uint64_t count);

    VkFramebufferCreateInfo *CopyArray(const VkFramebufferCreateInfo *src,
                                       uint64_t                       start_index,
                                       uint64_t                       count);

    VkRenderPassCreateInfo *CopyArray(const VkRenderPassCreateInfo *src,
                                      uint64_t                      start_index,
                                      uint64_t                      count);

    VkRenderPassBeginInfo *CopyArray(const VkRenderPassBeginInfo *src,
                                     uint64_t                     start_index,
                                     uint64_t                     count);

    VkMemoryBarrier *CopyArray(const VkMemoryBarrier *src, uint64_t start_index, uint64_t count);

    VkBufferMemoryBarrier *CopyArray(const VkBufferMemoryBarrier *src,
                                     uint64_t                     start_index,
                                     uint64_t                     count);

    VkImageMemoryBarrier *CopyArray(const VkImageMemoryBarrier *src,
                                    uint64_t                    start_index,
                                    uint64_t                    count);

    VkConditionalRenderingBeginInfoEXT *CopyArray(const VkConditionalRenderingBeginInfoEXT *src,
                                                  uint64_t start_index,
                                                  uint64_t count);

    VkDebugMarkerMarkerInfoEXT *CopyArray(const VkDebugMarkerMarkerInfoEXT *src,
                                          uint64_t                          start_index,
                                          uint64_t                          count);

    VkDebugUtilsLabelEXT *CopyArray(const VkDebugUtilsLabelEXT *src,
                                    uint64_t                    start_index,
                                    uint64_t                    count);

    VkCommandBufferInheritanceInfo *CopyArray(const VkCommandBufferInheritanceInfo *src,
                                              uint64_t                              start_index,
                                              uint64_t                              count);

    VkImageSubresourceLayers *CopyArray(const VkImageSubresourceLayers *src,
                                        uint64_t                        start_index,
                                        uint64_t                        count);

    VkOffset3D *CopyArray(const VkOffset3D *src, uint64_t start_index, uint64_t count);

    VkExtent3D *CopyArray(const VkExtent3D *src, uint64_t start_index, uint64_t count);

    VkClearValue *CopyArray(const VkClearValue *src, uint64_t start_index, uint64_t count);

    VkDescriptorSetLayoutBinding *CopyArray(const VkDescriptorSetLayoutBinding *src,
                                            uint64_t                            start_index,
                                            uint64_t                            count);

    VkDescriptorImageInfo *CopyArray(const VkDescriptorImageInfo *src,
                                     uint64_t                     start_index,
                                     uint64_t                     count);

    VkDescriptorBufferInfo *CopyArray(const VkDescriptorBufferInfo *src,
                                      uint64_t                      start_index,
                                      uint64_t                      count);

    VkComponentMapping *CopyArray(const VkComponentMapping *src,
                                  uint64_t                  start_index,
                                  uint64_t                  count);

    VkOffset2D *CopyArray(const VkOffset2D *src, uint64_t start_index, uint64_t count);

    VkExtent2D *CopyArray(const VkExtent2D *src, uint64_t start_index, uint64_t count);

    VkAttachmentDescription *CopyArray(const VkAttachmentDescription *src,
                                       uint64_t                       start_index,
                                       uint64_t                       count);

    VkSubpassDescription *CopyArray(const VkSubpassDescription *src,
                                    uint64_t                    start_index,
                                    uint64_t                    count);

    VkSubpassDependency *CopyArray(const VkSubpassDependency *src,
                                   uint64_t                   start_index,
                                   uint64_t                   count);

    char *CopyString(const char *src, uint64_t max_str_len);

    AllocatorType            *m_allocator;
    size_t                    m_allocator_start_size;
    const char               *m_data;
    uint64_t                  m_data_size;
    VulkanMetadataBlockHeader m_metadata_version;
};

std::unordered_map<VkDescriptorSet, DescriptorsetInfo> DecodeDescriptorSetsInitialState(
const char *data,
uint64_t    size);

}  // namespace Dive