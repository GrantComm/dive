/*
 * Copyright (C) 2020 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * THIS FILE WAS GENERATED BY apic. DO NOT EDIT.
 */

#pragma once
#include <cstdint>
#include <string>
#include <unordered_map>
#include <vector>

namespace Dive
{
// Vulkan metadata version:  <Major>.<Minor>
// <Major> is incremented for change that breaks compatibility.
// <Minor> is incremented for all small change that do not break compatibility.
inline constexpr uint16_t kVulkanMetaDataMajorVersion = 0;
inline constexpr uint16_t kVulkanMetaDataMinorVersion = 3;
// version 0.1: initial version that capture vulkan call parameters(without those in array).
// version 0.2: includes capturing non-vkcmd vulkan calls, which writes the data directly into the
// capture file. version 0.3: includes the handle value created by the non-vkcmd vulkan calls.

static constexpr uint32_t kNopPayloadSignature = 0x90091e;

union NopVulkanCallHeader
{
    struct
    {
        uint32_t signature : 24;  // signature
        uint32_t cmdID : 8;       // VKCmdID
    };
    uint32_t u32All;
};

enum class VKCmdID : uint8_t
{
    vkBeginCommandBufferCmdID,
    vkEndCommandBufferCmdID,
    vkCmdExecuteCommandsCmdID,
    vkCmdCopyBufferCmdID,
    vkCmdCopyImageCmdID,
    vkCmdBlitImageCmdID,
    vkCmdCopyBufferToImageCmdID,
    vkCmdCopyImageToBufferCmdID,
    vkCmdUpdateBufferCmdID,
    vkCmdFillBufferCmdID,
    vkCmdClearColorImageCmdID,
    vkCmdClearDepthStencilImageCmdID,
    vkCmdClearAttachmentsCmdID,
    vkCmdResolveImageCmdID,
    vkCmdBindDescriptorSetsCmdID,
    vkCmdPushConstantsCmdID,
    vkCmdBindIndexBufferCmdID,
    vkCmdBindVertexBuffersCmdID,
    vkCmdDrawCmdID,
    vkCmdDrawIndexedCmdID,
    vkCmdDrawIndirectCmdID,
    vkCmdDrawIndexedIndirectCmdID,
    vkCmdDispatchCmdID,
    vkCmdDispatchIndirectCmdID,
    vkCmdBindPipelineCmdID,
    vkCmdSetViewportCmdID,
    vkCmdSetScissorCmdID,
    vkCmdSetLineWidthCmdID,
    vkCmdSetDepthBiasCmdID,
    vkCmdSetBlendConstantsCmdID,
    vkCmdSetDepthBoundsCmdID,
    vkCmdSetStencilCompareMaskCmdID,
    vkCmdSetStencilWriteMaskCmdID,
    vkCmdSetStencilReferenceCmdID,
    vkCmdBeginQueryCmdID,
    vkCmdEndQueryCmdID,
    vkCmdResetQueryPoolCmdID,
    vkCmdWriteTimestampCmdID,
    vkCmdCopyQueryPoolResultsCmdID,
    vkCmdBeginRenderPassCmdID,
    vkCmdNextSubpassCmdID,
    vkCmdEndRenderPassCmdID,
    vkCmdSetEventCmdID,
    vkCmdResetEventCmdID,
    vkCmdWaitEventsCmdID,
    vkCmdPipelineBarrierCmdID,
    vkCmdWriteBufferMarkerAMDCmdID,
    vkCmdDrawIndirectCountAMDCmdID,
    vkCmdDrawIndexedIndirectCountAMDCmdID,
    vkCmdBeginDebugUtilsLabelEXTCmdID,
    vkCmdEndDebugUtilsLabelEXTCmdID,
    vkCmdInsertDebugUtilsLabelEXTCmdID,
    vkCmdSetDeviceMaskKHRCmdID,
    vkCmdSetDeviceMaskCmdID,
    vkCmdDispatchBaseKHRCmdID,
    vkCmdDispatchBaseCmdID,
    vkCmdDrawIndirectCountKHRCmdID,
    vkCmdDrawIndexedIndirectCountKHRCmdID,
    vkCmdBeginConditionalRenderingEXTCmdID,
    vkCmdEndConditionalRenderingEXTCmdID,
    vkQueueSubmit,
};

static const std::vector<std::string> VulkanCmdList{
    "vkBeginCommandBuffer",
    "vkEndCommandBuffer",
    "vkCmdExecuteCommands",
    "vkCmdCopyBuffer",
    "vkCmdCopyImage",
    "vkCmdBlitImage",
    "vkCmdCopyBufferToImage",
    "vkCmdCopyImageToBuffer",
    "vkCmdUpdateBuffer",
    "vkCmdFillBuffer",
    "vkCmdClearColorImage",
    "vkCmdClearDepthStencilImage",
    "vkCmdClearAttachments",
    "vkCmdResolveImage",
    "vkCmdBindDescriptorSets",
    "vkCmdPushConstants",
    "vkCmdBindIndexBuffer",
    "vkCmdBindVertexBuffers",
    "vkCmdDraw",
    "vkCmdDrawIndexed",
    "vkCmdDrawIndirect",
    "vkCmdDrawIndexedIndirect",
    "vkCmdDispatch",
    "vkCmdDispatchIndirect",
    "vkCmdBindPipeline",
    "vkCmdSetViewport",
    "vkCmdSetScissor",
    "vkCmdSetLineWidth",
    "vkCmdSetDepthBias",
    "vkCmdSetBlendConstants",
    "vkCmdSetDepthBounds",
    "vkCmdSetStencilCompareMask",
    "vkCmdSetStencilWriteMask",
    "vkCmdSetStencilReference",
    "vkCmdBeginQuery",
    "vkCmdEndQuery",
    "vkCmdResetQueryPool",
    "vkCmdWriteTimestamp",
    "vkCmdCopyQueryPoolResults",
    "vkCmdBeginRenderPass",
    "vkCmdNextSubpass",
    "vkCmdEndRenderPass",
    "vkCmdSetEvent",
    "vkCmdResetEvent",
    "vkCmdWaitEvents",
    "vkCmdPipelineBarrier",
    "vkCmdWriteBufferMarkerAMD",
    "vkCmdDrawIndirectCountAMD",
    "vkCmdDrawIndexedIndirectCountAMD",
    "vkCmdBeginDebugUtilsLabelEXT",
    "vkCmdEndDebugUtilsLabelEXT",
    "vkCmdInsertDebugUtilsLabelEXT",
    "vkCmdSetDeviceMaskKHR",
    "vkCmdSetDeviceMask",
    "vkCmdDispatchBaseKHR",
    "vkCmdDispatchBase",
    "vkCmdDrawIndirectCountKHR",
    "vkCmdDrawIndexedIndirectCountKHR",
    "vkCmdBeginConditionalRenderingEXT",
    "vkCmdEndConditionalRenderingEXT",
    "vkQueueSubmit",
};
}  // namespace Dive